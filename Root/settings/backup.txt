import os
from pathlib import Path
from datetime import timedelta
import psycopg2
import environ
env = environ.Env(DEBUG=(bool, False) )

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY=env('SECRET_KEY')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'rest_framework.authtoken',
    'corsheaders',
    'apps.accounts',
    'apps.financials',
    'apps.subscriptions',
    'apps.marketing',
    'apps.communications',
    'apps.customer',
    'apps.revenue',
    'apps.statements',

]

SITE_ID = 1

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)
AUTHENTICATED_LOGIN_REDIRECTS = True
AUTHENTICATED_REDIRECTS = True

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': env('GOOGLE_CLIENT_ID'),
            'secret': env('GOOGLE_CLIENT_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online'
        },
        'METHOD': 'oauth2',
        'OAUTH2_CLIENT_CLASS': 'allauth.socialaccount.providers.google.client.OAuth2Client',
        'OAUTH2_URL': 'https://accounts.google.com/o/oauth2/auth',
        'OAUTH2_TOKEN_URL': 'https://accounts.google.com/o/oauth2/token',
        'OAUTH2_USER_URL': 'https://www.googleapis.com/oauth2/v3/userinfo',
        'OAUTH2_USER_INFO_URL': 'https://www.googleapis.com/oauth2/v3/userinfo',
        'OAUTH2_USER_INFO_SCOPE': 'openid email profile',
        'OAUTH2_USER_INFO_METHOD': 'GET'
    }
}

ACCOUNT_USER_MODEL_USERNAME_FIELD = None  # Explicitly set to None
ACCOUNT_SIGNUP_FIELDS = ['email', 'password1', 'password2', 'first_name', 'last_name', 'company']
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_USERNAME_REQUIRED = False  # Explicitly disable username
ACCOUNT_USER_MODEL_USERNAME_FIELD = None  # Ensure no username field is expected


REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',  # Optional: for form data
    ],
}

APPEND_SLASH = True

REST_AUTH_SERIALIZERS = {
    'JWT_SERIALIZER': 'apps.accounts.serializers.CustomJWTSerializer',
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=3),  # Short-lived access tokens
    'REFRESH_TOKEN_LIFETIME': timedelta(days=10),     # Longer-lived refresh tokens
    'ROTATE_REFRESH_TOKENS': True,                  # Issue a new refresh token on every use
    'BLACKLIST_AFTER_ROTATION': True,               # Blacklist old refresh tokens if rotated
    'ALGORITHM': 'HS256',                           # Default is HS256, but you can switch to RS256 for RSA keys
    'SIGNING_KEY': SECRET_KEY,                      # Default is Django's SECRET_KEY
    'AUTH_HEADER_TYPES': ('Bearer',),               # Authorization: Bearer <token>
    'USER_ID_FIELD': 'id',                          # Field to identify the user
    'USER_ID_CLAIM': 'user_id',                     # Claim name in the token
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),  # Token classes
    'TOKEN_TYPE_CLAIM': 'token_type',               # Token type claim
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Add this line
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.common.CommonMiddleware',
]

ROOT_URLCONF = 'Root.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Root.wsgi.application'


# https://docs.djangoproject.com/en/5.1/ref/settings/#databases# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


SPECTACULAR_SETTINGS = {
    'TITLE': 'Subscription API',
    'DESCRIPTION': 'API for managing subscriptions and plans.',
    'VERSION': '1.0.0',
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'accounts.CustomUser'

# Email conf
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
RESEND_KEY = env('FINARCHITECT_RESEND_KEY')
# Security settings
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'
SECURE_CONTENT_TYPE_NOSNIFF = True

# Static files configuration
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
